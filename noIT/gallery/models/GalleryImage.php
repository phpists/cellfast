<?php

namespace noIT\gallery\models;

use noIT\imagecache\helpers\ImagecacheHelper;
use Yii;
use noIT\core\helpers\AdminHelper;
use yii\behaviors\TimestampBehavior;

/**
 * This is the model class for table "{{%gallery_image}}".
 *
 * @property integer $id
 * @property string $entity
 * @property integer $entity_id
 * @property string $slug
 * @property string $src
 * @property string $title
 * @property string $caption
 * @property string $alt
 * @property integer $status
 * @property integer $sort_order
 * @property integer $created_at
 * @property integer $updated_at
 */

class GalleryImage extends \yii\db\ActiveRecord
{
	const STATUS_DISABLE = 0;
	const STATUS_ACTIVE = 10;

	public $uploadDir = '@cdn/{entity}/{entity_id}';
	public $uploadUrl = '@cdnUrl/{entity}/{entity_id}';

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%gallery_image}}';
    }

	/**
	 * @inheritdoc
	 */
	public function behaviors()
	{
		return [
			'timestamp' => [
				'class' => TimestampBehavior::className(),
			],
		];
	}

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [[AdminHelper::LangsField(['caption'])], 'string'],
            [['entity_id', AdminHelper::FIELDNAME_STATUS, AdminHelper::FIELDNAME_SORT, 'created_at', 'updated_at'], 'integer'],
            [['entity'], 'string', 'max' => 50],
            [['slug', 'src'], 'string', 'max' => 255],
            [[AdminHelper::LangsField(['title', 'alt'])], 'string', 'max' => 250],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
	    $result = [
		    'id' => 'ID',
		    'entity' => Yii::t('app', 'Entity alias'),
		    'src' => Yii::t('app', 'Source'),
		    'slug' => Yii::t('app', 'URL-address'),
		    AdminHelper::FIELDNAME_STATUS => Yii::t('app', 'Status'),
		    AdminHelper::FIELDNAME_SORT => Yii::t('app', 'Sort Order'),
	    ];

	    foreach (AdminHelper::getLanguages() as $language) {
		    $result = array_merge($result, [
			    AdminHelper::getLangField('title', $language) => Yii::t('app', 'Title') ." ". Yii::t('app', $language->code),
			    AdminHelper::getLangField('alt', $language) => Yii::t('app', 'Atler') ." ". Yii::t('app', $language->code),
			    AdminHelper::getLangField('caption', $language) => Yii::t('app', 'Caption') ." ". Yii::t('app', $language->code),
		    ]);
	    }

	    return $result;
    }

	public function getTitle()
	{
		return \Yii::$app->languages->current->getEntityField($this, 'title');
	}

	public function getAlt()
	{
		return \Yii::$app->languages->current->getEntityField($this, 'alt');
	}

	public function getCaption()
	{
		return \Yii::$app->languages->current->getEntityField($this, 'caption');
	}

	protected function getPath($path)
	{
    	return str_replace(['{entity}', '{entity_id}'], [$this->entity, $this->entity_id], $path);
	}

	public function imagePath($filename)
	{
		return Yii::getAlias($this->getPath($this->uploadDir) ."/$filename");
	}

	public function imageUrl($filename)
	{
		return Yii::getAlias($this->getPath($this->uploadUrl) ."/$filename");
	}

	public function getFile()
	{
		return $this->imagePath($this->src);
	}

	public function getUrl()
	{
		return $this->imageUrl($this->src);
	}

	public function getFilesize()
	{
		return filesize($this->file);
	}

	public function getConfig()
	{
		return [
			'key' => $this->id,
			'size' => $this->filesize,
			'width' => '120px',
		];
	}

	public function getUrl_admin_trumb()
	{
    	return ImagecacheHelper::getImageSrc($this->url, 'admin_thumb_lg');
	}

	/**
     * @inheritdoc
     * @return GalleryImageQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new GalleryImageQuery(get_called_class());
    }

    public static function findByEntity($entity, $entity_id)
    {
    	return self::find()->where(['entity' => strtolower($entity), 'entity_id' => $entity_id])->one();
    }

    public function validate( $attributeNames = null, $clearErrors = true )
    {
	    return parent::validate( $attributeNames, $clearErrors ); // TODO: Change the autogenerated stub
    }
}
